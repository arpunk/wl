#!/usr/bin/env escript
%% -*- erlang -*-
-mode(compile).
-include_lib("xmerl/include/xmerl.hrl").
-include_lib("syntax_tools/include/merl.hrl").

-record(request,{name,opcode,type,since,args}).
-record(event,{name,evtcode,since,args}).
-record(arg,{name,type,interface,allow_null,enum}).
-record(enum,{name,since,bitfield,entries}).
-record(entry,{name,value,since}).


main([]) ->
    generate();

main(["clean"]) ->
    clean().


generate() ->
    lists:foreach(fun generate/1, protocols()).


clean() ->
    lists:foreach(fun clean/1, protocols()).


generate(XmlFile) ->
    {Protocol, Interfaces} = protocol_data(XmlFile),
    OutDir = objects_dir(Protocol),
    ok = filelib:ensure_dir(filename:join(OutDir, ".")),
    lists:foreach(fun (Itf) -> generate(Itf, OutDir) end, Interfaces).


generate({ItfStr, VerStr, Data}, OutDir) ->
    File = filename:join(OutDir, ItfStr ++ ".erl"),
    case filelib:is_regular(File) of
        true ->
            ok;
        false ->
            Mod = generate(list_to_atom(ItfStr), list_to_integer(VerStr), Data),
            write_module(Mod, File)
    end.


generate(Itf, Ver, Data) ->
    {Rs,Evts,Enms} = parse_interface(Data),

    ItfExports = interface_exports(Rs, Evts),

    [ ?Q("-module('@Itf@').")
    , ?Q("-export([interface_info/0,interface_info/1]).")
    , ?Q("-export(['@_@ItfExports'/0]).")
    ] ++ interface_info(Ver, Rs, Evts, Enms)
      ++ interface_api(Rs, Evts, Enms).


parse_interface(Data) ->
    {Rs,_,Evs,_,Ens} = lists:foldl(fun parse_interface/2, {[],0,[],0,[]}, Data),
    {lists:reverse(Rs), lists:reverse(Evs), lists:reverse(Ens)}.

parse_interface(#xmlElement{name='request', attributes=Attrs, content=Cont}
               ,{Rs,OpCode, Evts,EvtCode, Enms}) ->
    R = #request{name   = atom_attribute(name, Attrs)
                ,opcode = OpCode
                ,type   = atom_attribute(type, Attrs)
                ,since  = integer_attribute(since, Attrs, 1)
                ,args   = lists:filtermap(fun parse_arg/1, Cont)
                },
    {[R|Rs], OpCode+1, Evts, EvtCode, Enms};

parse_interface(#xmlElement{name='event', attributes=Attrs, content=Cont}
               ,{Rs,OpCode, Evts,EvtCode, Enms}) ->
    Evt = #event{name    = atom_attribute(name, Attrs)
                ,evtcode = EvtCode
                ,since   = integer_attribute(since, Attrs, 1)
                ,args    = lists:filtermap(fun parse_arg/1, Cont)
                },
    {Rs, OpCode, [Evt|Evts], EvtCode+1, Enms};

parse_interface(#xmlElement{name='enum', attributes=Attrs, content=Cont}
               ,{Rs,OpCode, Evts,EvtCode, Enms}) ->
    Enm = #enum{name     = atom_attribute(name, Attrs)
               ,since    = integer_attribute(since, Attrs, 1)
               ,bitfield = atom_attribute(bitfield, Attrs, false)
               ,entries  = lists:filtermap(fun parse_entry/1, Cont)
               },
    {Rs, OpCode, Evts,EvtCode, [Enm|Enms]};

parse_interface(_, Acc) ->
    Acc.


parse_arg(#xmlElement{name='arg', attributes=Attrs}) ->
    {true, #arg{name       = atom_attribute(name, Attrs)
               ,type       = atom_attribute(type, Attrs)
               ,interface  = atom_attribute(interface, Attrs)
               ,allow_null = atom_attribute('allow-null', Attrs, false)
               ,enum       = atom_attribute(enum, Attrs)
               }
    };

parse_arg(_) ->
    false.


parse_entry(#xmlElement{name='entry', attributes=Attrs}) ->
    {true, #entry{name  = atom_attribute(name, Attrs)
                 ,value = integer_attribute(value, Attrs, 0)
                 ,since = integer_attribute(since, Attrs, 1)
                 }
    };

parse_entry(_) ->
    false.


write_module(Forms, File) ->
    {ok, IoDev} = file:open(File, [write]),
    lists:foreach(fun (F) ->
                          io:put_chars(IoDev, erl_prettypr:format(F)),
                          io:nl(IoDev),
                          io:nl(IoDev)
                  end, erl_syntax:revert_forms(Forms)),
    ok = file:close(IoDev).


clean(XmlFile) ->
    {Protocol, _} = protocol_data(XmlFile),
    OutDir = objects_dir(Protocol),
    case filelib:is_dir(OutDir) of
        true ->
            ErlFiles = filename:join(OutDir, "*.erl"),
            lists:foreach(fun file:delete/1, filelib:wildcard(ErlFiles)),
            ok = file:del_dir(OutDir);
        false ->
            ok
    end.


protocols() ->
    Dir = filename:absname(filename:dirname(escript:script_name())),
    filelib:wildcard(filename:join([Dir, "*.xml"])).


protocol_data(XmlFile) ->
    {#xmlElement{ name=protocol
                , attributes=[#xmlAttribute{name=name,value=Protocol} | _]
                , content=Cont}, []} = xmerl_scan:file(XmlFile),
    Itfs = [interface_data(I) || #xmlElement{name=interface}=I <- Cont],
    {Protocol, Itfs}.


interface_data(#xmlElement{attributes=Attrs, content=Cont}) ->
    [Name] = [V || #xmlAttribute{name=name,value=V} <- Attrs],
    [Version] = [V || #xmlAttribute{name=version,value=V} <- Attrs],
    {Name, Version, Cont}.


objects_dir(Protocol) ->
    SrcDir = filename:absname(filename:dirname(escript:script_name())),
    filename:join([SrcDir, "..", "src", Protocol]).


atom_attribute(Name, Attrs) -> atom_attribute(Name, Attrs, undefined).

atom_attribute(Name, Attrs, Default) ->
    case lists:keyfind(Name, #xmlAttribute.name, Attrs) of
        #xmlAttribute{value=V} -> list_to_atom(V);
        false                  -> Default
    end.


integer_attribute(Name, Attrs, Default) ->
    case lists:keyfind(Name, #xmlAttribute.name, Attrs) of
        #xmlAttribute{value="0x" ++ V} -> list_to_integer(V, 16);
        #xmlAttribute{value=V}         -> list_to_integer(V, 10);
        false                          -> Default
    end.


interface_exports(Rs, Evts) ->
    requests_export(Rs) ++ events_export(Evts).


requests_export(Rs) ->
    [request_export(R) || R <- Rs].

request_export(#request{name=Name,args=Args}) ->
    Q1 = length(Args) + 1,
    erl_syntax:arity_qualifier(?Q("'@Name@'"), ?Q("909199")).


events_export([]) ->
    [];
events_export(_) ->
    [erl_syntax:arity_qualifier(?Q("'$notify$'"), ?Q("4"))].


interface_info(Ver, Rs, Evts, Enms) ->
    RsInfo = requests_info(Rs),
    EvtsInfo = events_info(Evts),
    EnmsInfo = enums_info(Enms),
    [ ?Q(["interface_info() -> "
         ,"    [{version,  _@Ver@}"
         ,"    ,{requests, interface_info(requests)}"
         ,"    ,{events,   interface_info(events)}"
         ,"    ,{enums,    interface_info(enums)}]."
         ])
    , ?Q(["interface_info(version)  -> _@Ver@;"
         ,"interface_info(requests) -> _@RsInfo@;"
         ,"interface_info(events)   -> _@EvtsInfo@;"
         ,"interface_info(enums)    -> _@EnmsInfo@;"
         ,"interface_info(_)        -> error(badarg)."
         ])
    ].


interface_api(Rs, Evts, Enms) ->
    requests_api(Rs) ++ events_api(Evts) ++ enum_encode_decode(Enms, Rs, Evts).


requests_api(Rs) ->
    [request_api(R) || R <- Rs].

request_api(#request{name=Name,opcode=Code,args=Args,type=Type}) ->
    request_api(Type, Name, Code, args_to_vars(Args)).

request_api(destructor, Name, Code, {AllVars, {Args,ArgsVars}, FdsVars}) ->
    EncArgs = encode_args_ast(Args, ArgsVars),
    ?Q(["'@Name@'(Pid, _@@AllVars) ->"
       ,"    wl_object:request(Pid, _@Code@, _@EncArgs, [_@@FdsVars]),"
       ,"    wl_object:destroy(Pid)."
       ]);

request_api(_Type, Name, Code, {AllVars, {Args,ArgsVars}, FdsVars}) ->
    EncArgs = encode_args_ast(Args, ArgsVars),
    ?Q(["'@Name@'(Pid, _@@AllVars) ->"
       ,"    wl_object:request(Pid, _@Code@, _@EncArgs, [_@@FdsVars])."
       ]).


events_api([]) ->
    [];

events_api(Evts) ->
    Clauses = lists:map(fun notify_fun_clause/1, Evts),
    [?Q("'$notify$'(Pid, EvtCode, Args, Fds) -> _@_Clauses.")].


notify_fun_clause(#event{name=Name,evtcode=Code,args=Args}) ->
    notify_fun_clause(Name, Code, args_to_vars(Args)).


notify_fun_clause(Name, Code, {[], {[], []}, []}) ->
    ?Q(["(Pid, _@Code@, <<>>, Fds) ->"
       ,"  Pid ! {'$event$', _@Name@, []},"
       ,"  {[], Fds}"
       ]);

notify_fun_clause(Name, Code, {_, {[], []}, FdsVars}) ->
    ?Q(["(Pid, _@Code@, <<>>, [_@@FdsVars | Rest]) ->"
       ,"  Pid ! {'$event$', _@Name@, [_@@FdsVars]},"
       ,"  {[], Rest}"
       ]);

notify_fun_clause(Name, Code, {AllVars, {Args, ArgsVars}, []}) ->
    {DecArgs, NewObjects} = decode_args_ast(Args, ArgsVars, merl:var("Args")),
    ?Q(["(Pid, _@Code@, Args, Fds) ->"
       ,"  _@@DecArgs,"
       ,"  Pid ! {'$event$', _@Name@, [_@@AllVars]},"
       ,"  {[_@@NewObjects], Fds}"
       ]);

notify_fun_clause(Name, Code, {AllVars, {Args, ArgsVars}, FdsVars}) ->
    {DecArgs, NewObjects} = decode_args_ast(Args, ArgsVars, merl:var("Args")),
    ?Q(["(Pid, _@Code@, Args, [_@@FdsVars | Rest]) ->"
       ,"  _@@DecArgs,"
       ,"  Pid ! {'$event$', _@Name@, [_@@AllVars]},"
       ,"  {[_@@NewObjects], Rest}"
       ]).


enum_encode_decode(Enms, Rs, Evts) ->
    enum_encode_fun(Enms, Rs) ++ enum_decode_fun(Enms, Evts).


enum_encode_fun(Enms, Rs) ->
    UsedEnums = used_enums([Args || #request{args=Args} <- Rs]),
    case sets:size(UsedEnums) of
        0 -> [];
        _ -> [enum_encode_fun([Enm || #enum{name=N}=Enm <- Enms
                                    , sets:is_element(N, UsedEnums)])]
    end.

enum_encode_fun(Enms) ->
    Clauses = lists:flatmap(fun enum_encode_clauses/1, Enms),
    ?Q("encode_enum(Enum, Value) -> _@_Clauses.").

enum_encode_clauses(#enum{name=Name,entries=Entries,bitfield=false}) ->
    [?Q("(_@Name@,_@N@) -> _@V@") || #entry{name=N,value=V} <- Entries];

enum_encode_clauses(#enum{name=Name,entries=Entries,bitfield=true}) ->
    Clauses = [?Q("(_@N@,V) -> V bor _@V@")
               || #entry{name=N,value=V} <- Entries],
    [?Q("(_@Name@,V) when is_atom(V) -> encode_enum(_@Name@,[V])")
    ,?Q("(_@Name@,Vs) -> lists:foldl(fun (_,_) -> _@_Clauses end, 0, Vs)")].


enum_decode_fun(Enms, Evts) ->
    UsedEnums = used_enums([Args || #event{args=Args} <- Evts]),
    case sets:size(UsedEnums) of
        0 -> [];
        _ -> [enum_decode_fun([Enm || #enum{name=N}=Enm <- Enms
                                    , sets:is_element(N, UsedEnums)])]
    end.

enum_decode_fun(Enms) ->
    Clauses = lists:flatmap(fun enum_decode_clauses/1, Enms),
    ?Q("decode_enum(Enum, Value) -> _@_Clauses.").


enum_decode_clauses(#enum{name=Name,entries=Entries,bitfield=false}) ->
    [?Q("(_@Name@,_@V@) -> _@N@") || #entry{name=N,value=V} <- Entries];

enum_decode_clauses(#enum{name=Name,entries=Entries,bitfield=true}) ->
    Vs = [{N,V} || #entry{name=N,value=V} <- Entries],
    [?Q(["(_@Name@,V) ->"
        ,"   lists:foldl(fun ({N,V1},_) when V == V1 -> [N];"
        ,"                   ({N,V1},Ns) when (V band V1) /= 0 -> [N | Ns];"
        ,"                   (_, Ns)                           -> Ns"
        ,"               end, [], _@Vs@)"])].


used_enums(ArgsList) ->
    Enums = [N || Args <- ArgsList, #arg{enum=N} <- Args, N /= undefined],
    sets:from_list(Enums).

requests_info(Rs) ->
    [request_info(R) || R <- Rs].

request_info(#request{name=Name,opcode=Code,type=Type,since=Since,args=Args}) ->
    Info = [{opcode,Code}, {type,Type}, {since,Since}],
    {Name, args_info(Args), [{N,V} || {N,V} <- Info, V /= undefined]}.


events_info(Evts) ->
    [event_info(Evt) || Evt <- Evts].

event_info(#event{name=Name,evtcode=Code,since=Since,args=Args}) ->
    Info = [{evtcode,Code}, {since,Since}],
    {Name, args_info(Args), [{N,V} || {N,V} <- Info, V /= undefined]}.


enums_info(Enms) ->
    [enum_info(Enm) || Enm <- Enms].

enum_info(#enum{name=Name,since=Since,bitfield=BitField,entries=Entries}) ->
    Info = [{since,Since}, {bitfield,BitField}],
    {Name, entries_info(Entries), [{N,V} || {N,V} <- Info, V /= undefined]}.


args_info(Args) ->
    [arg_info(Arg) || Arg <- Args].

arg_info(#arg{name=Name,type=Type,interface=Itf,allow_null=Null,enum=Enm}) ->
    Info = [{interface,Itf}, {allow_null,Null}, {enum, Enm}],
    {Name, Type, [{N,V} || {N,V} <- Info, V /= undefined]}.


entries_info(Entries) ->
    [entry_info(Entry) || Entry <- Entries].

entry_info(#entry{name=Name,value=Val,since=Since}) ->
    Info = [{since, Since}],
    {Name, Val, [{N,V} || {N,V} <- Info, V /= undefined]}.


args_to_vars(Args) ->
    ArgsVars = [{A,var_ast("A",N)}
                || {A,N} <- lists:zip(Args,lists:seq(1, length(Args)))],

    {As, Fds} = lists:partition(fun ({A,_}) -> not is_fd_arg(A) end, ArgsVars),

    AsVars  = [V || {_,V} <- As],
    FdsVars = [V || {_,V} <- Fds],
    AllVars = [V || {_,V} <- ArgsVars],

    {AllVars, {[A || {A,_} <- As], AsVars}, FdsVars}.


is_fd_arg(#arg{type=T}) -> T == 'fd'.


has_new_id_arg(Args) ->
    lists:any(fun (#arg{type=Type}) -> Type == new_id end, Args).


encode_args_ast(Args, Vars) ->
    encode_args_ast(Args, Vars, has_new_id_arg(Args)).

encode_args_ast(Args, Vars, false) ->
    EncArgs = [encode_arg_ast(A,V) || {A,V} <- lists:zip(Args, Vars)],
    ?Q("[_@EncArgs]");

encode_args_ast(Args, Vars, true) ->
    Split = fun ({#arg{type=T},_}) -> T /= new_id end,
    {A1, [NewId | A2]} = lists:splitwith(Split, lists:zip(Args, Vars)),
    {NewIdArg, NewIdVar} = NewId,

    EncA1 = [encode_arg_ast(A,V) || {A,V} <- A1],
    EncNewId = encode_arg_ast(NewIdArg, NewIdVar),
    EncA2 = [encode_arg_ast(A,V) || {A,V} <- A2],

    ?Q("{[_@EncA1], _@EncNewId, [_@EncA2]}").


encode_arg_ast(#arg{type=int, enum=undefined}, V) ->
    ?Q("wl_wire:encode_int(_@V)");

encode_arg_ast(#arg{type=int, enum=E}, V) ->
    ?Q("wl_wire:encode_int(encode_enum(_@E@,_@V))");

encode_arg_ast(#arg{type=uint, enum=undefined}, V) ->
    ?Q("wl_wire:encode_uint(_@V)");

encode_arg_ast(#arg{type=uint, enum=E}, V) ->
    ?Q("wl_wire:encode_uint(encode_enum(_@E@,_@V))");

encode_arg_ast(#arg{type=new_id, interface=undefined}, V) ->
    ?Q("{new_id, _@V}");

encode_arg_ast(#arg{type=new_id, interface=Itf}, V) ->
    ?Q("{new_id, _@Itf@, _@V}");

encode_arg_ast(#arg{type=object}, V) ->
    ?Q("{id, _@V}");

encode_arg_ast(#arg{type=string}, V) ->
    ?Q("wl_wire:encode_string(_@V)");

encode_arg_ast(#arg{type=fixed}, V) ->
    ?Q("wl_wire:encode_fixed(_@V)");

encode_arg_ast(#arg{type=array}, V) ->
    ?Q("wl_wire:encode_array(_@V)").


decode_args_ast(Args, Vars, In) ->
    decode_args_ast(Args, Vars, In, [], []).

decode_args_ast([], [], _, ArgAcc, ObjectAcc) ->
    {lists:reverse(ArgAcc), ObjectAcc};

decode_args_ast([A], [V], In, ArgAcc, ObjectAcc) ->
    case decode_last_arg_ast(A, V, In) of
        {Arg, Object} ->
            {lists:reverse([Arg | ArgAcc]), [Object | ObjectAcc]};
        Arg ->
            {lists:reverse([Arg | ArgAcc]), ObjectAcc}
    end;

decode_args_ast([A | As], [V | Vs], In, ArgAcc, ObjectAcc) ->
    case decode_arg_ast(A, V, In, length(ArgAcc)) of
        {Arg, Object, Rest} ->
            decode_args_ast(As, Vs, Rest, [Arg | ArgAcc], [Object | ObjectAcc]);
        {Arg, Rest} ->
            decode_args_ast(As, Vs, Rest, [Arg | ArgAcc], ObjectAcc)
    end.


decode_arg_ast(#arg{type=int, enum=undefined}, V, Args, N) ->
    Rest = var_ast("Args", N),
    {?Q("{_@V ,_@Rest} = wl_wire:decode_int(_@Args)"), Rest};

decode_arg_ast(#arg{type=uint, enum=undefined}, V, Args, N) ->
    Rest = var_ast("Args", N),
    {?Q("{_@V ,_@Rest} = wl_wire:decode_uint(_@Args)"), Rest};

decode_arg_ast(#arg{type=int, enum=Enum}, V, Args, N) ->
    Rest = var_ast("Args", N),
    V1 = var_ast(V,1),
    {?Q(["{_@V1,_@Rest} = wl_wire:decode_int(_@Args),"
        ,"_@V = decode_enum('@Enum@', _@V1)"])
    , Rest};

decode_arg_ast(#arg{type=uint, enum=Enum}, V, Args, N) ->
    Rest = var_ast("Args", N),
    V1 = var_ast(V,1),
    {?Q(["{_@V1,_@Rest} = wl_wire:decode_uint(_@Args),"
        ,"_@V = decode_enum('@Enum@', _@V1)"])
    , Rest};

decode_arg_ast(#arg{type=new_id, interface=Itf}, V, Args, N) ->
    Rest = var_ast("Args", N),
    V1 = var_ast(V,1),
    {?Q(["{_@V1, _@Rest} = wl_wire:decode_object(_@Args),"
        ,"_@V = wl_object:start_child(Pid, _@Itf@, _@V1)"])
    ,?Q("{_@V1, _@Itf@, _@V}")
    ,Rest
    };

decode_arg_ast(#arg{type=object}, V, Args, N) ->
    Rest = var_ast("Args", N),
    V1 = var_ast(V,1),
    {?Q(["{_@V1, _@Rest} = wl_wire:decode_object(_@Args),"
        ,"_@V = {id, _@V1}"])
    , Rest};

decode_arg_ast(#arg{type=string}, V, Args, N) ->
    Rest = var_ast("Args", N),
    {?Q("{_@V, _@Rest} = wl_wire:decode_string(_@Args)"), Rest};

decode_arg_ast(#arg{type=fixed}, V, Args, N) ->
    Rest = var_ast("Args", N),
    {?Q("{_@V, _@Rest} = wl_wire:decode_fixed(_@Args)"), Rest};

decode_arg_ast(#arg{type=array}, V, Args, N) ->
    Rest = var_ast("Args", N),
    {?Q("{_@V, _@Rest} = wl_wire:decode_array(_@Args)"), Rest}.


decode_last_arg_ast(#arg{type=int, enum=undefined}, V, Args) ->
    ?Q("{_@V, <<>>} = wl_wire:decode_int(_@Args)");

decode_last_arg_ast(#arg{type=uint, enum=undefined}, V, Args) ->
    ?Q("{_@V, <<>>} = wl_wire:decode_uint(_@Args)");

decode_last_arg_ast(#arg{type=int, enum=Enum}, V, Args) ->
    V1 = var_ast(V,1),
    ?Q(["{_@V1,<<>>} = wl_wire:decode_int(_@Args),"
       ,"_@V = decode_enum('@Enum@', _@V1)"]);

decode_last_arg_ast(#arg{type=uint, enum=Enum}, V, Args) ->
    V1 = var_ast(V,1),
    ?Q(["{_@V1,<<>>} = wl_wire:decode_uint(_@Args),"
       ,"_@V = decode_enum('@Enum@', _@V1)"]);

decode_last_arg_ast(#arg{type=new_id, interface=Itf}, V, Args) ->
    V1 = var_ast(V,1),
    {?Q(["{_@V1, <<>>} = wl_wire:decode_object(_@Args),"
        ,"_@V = wl_object:start_child(Pid, _@Itf@, _@V1)"])
    ,?Q("{_@V1, _@Itf@, _@V}")
    };

decode_last_arg_ast(#arg{type=object}, V, Args) ->
    V1 = var_ast(V,1),
    ?Q(["{_@V1, <<>>} = wl_wire:decode_object(_@Args),"
       ,"_@V = {id, _@V1}"]);

decode_last_arg_ast(#arg{type=string}, V, Args) ->
    ?Q("{_@V, <<>>} = wl_wire:decode_string(_@Args)");

decode_last_arg_ast(#arg{type=fixed}, V, Args) ->
    ?Q("{_@V, <<>>} = wl_wire:decode_fixed(_@Args)");

decode_last_arg_ast(#arg{type=array}, V, Args) ->
    ?Q("{_@V, <<>>} = wl_wire:decode_array(_@Args)").


var_ast(Prefix, Id) when is_list(Prefix) ->
    merl:var(Prefix ++ integer_to_list(Id));

var_ast(BaseVar, Id) ->
    Prefix = erl_syntax:variable_literal(BaseVar),
    var_ast(Prefix ++ "_", Id).
